Welcome = '\nWelcome to Blockchain MadLib Game !\nPlease Choose type your difficulty level (eg. level1)\nlevel1 - easy; level2 - medium; level3 - hard\n'
print Welcome


# Easy difficulty madlib
madLib_level1 = 'A ...1... is a continuously growing list of records, called ...2...s, which are linked and secured using cryptography. Each ...2... typically contains a cryptographic hash of the previous ...2.... For use as a distributed ledger, a ...1... is typically managed by a peer to peer ...3... collectively adhering to a ...4... for validating new ...2...s. Once recorded, the data in any given ...2... cannot be altered retroactively without the alteration of all subsequent ...2...s, which requires collusion of the ...3... majority.'

# Answers for the easy-difficulty madlib
answers_level1 = ['blockchain', 'block', 'network', 'protocol']

# Medium difficulty madlib
madLib_level2 = 'Bitcoin is a ...1... and worldwide payment system It is the first ...2... digital currency, as the system works without a central bank or single administrator. The network is peer-to-peer and transactions take place between users directly, without an intermediary.These ...3... are verified by network nodes through the use of cryptography and recorded in a public distributed ledger called a ...4....Bitcoin was invented by an unknown person or group of people under the name Satoshi Nakamoto and released as open-source software in 2009.'

# Anwswers for medium-difficulty madlib
answers_level2 = ['cryptocurrency', 'decentralised', 'transactions', 'blockchain']

# Hard difficulty madlib
madLib_level3 = 'Ethereum is an open-source, public, blockchain-based distributed computing ...1... and operating system featuring smart ...2... (scripting) functionality.It supports a modified version of Nakamoto consensus via transaction based state transitions. \n ...3... is a cryptocurrency whose blockchain is generated by the Ethereum ...1.... ...3...can be transferred between accounts and used to compensate participant mining nodes for computations performed. Ethereum provides a ...4... Turing-complete virtual machine, the Ethereum Virtual Machine (EVM), which can execute scripts using an international network of public ...5...."Gas", an internal transaction pricing mechanism, is used to mitigate spam and allocate resources on the ...6....'

# Answers for hard-difficulty madlib
answers_level3 = ['platform', 'contract', 'Ether', 'decenstralised', 'nodes', 'network']


voids = ["...1...", "...2...", "...3...", "...4..."]

"""Returns the list of difficulties """
def levels():
    return ("level1", "level2", "level3", "quit")


"""Asks user to choose the desired level of difficulty.
Returns madLib_level string and answers_level list"""
def chooseLevel():
    difficulty = ""
    while difficulty not in levels():
        global difficulty
        difficulty = raw_input("Choose your difficulty: ").lower()
        if difficulty == "level1":
            print "\nYou've chosen " + str(difficulty) + '!\n'
            return madLib_level1, answers_level1
        elif difficulty == "level2":
            print "\nYou've chosen " + str(difficulty) + '!\n'
            return madLib_level2, answers_level2
        elif difficulty == "level3":
            print "\nYou've chosen " + str(difficulty) + '!\n'
            return madLib_level3, answers_level3
        elif difficulty == "quit":
            print "You quit the game."
            exit()
        else:
            print "ERROR! Please type one of the difficulty levels. If you want to exit type 'quit'."


""" Requests for an answer from user """
def chooseAnswers(correctAnswers):
	chooseAnswers = raw_input("\nEnter your answer for {} : ".format(correctAnswers)).lower()
	return chooseAnswers

def exitGame():
    print "You have lost the game."
    exit()


"""Plays the Blockchain Madlib Game.
Checks the user's guess. If it's correct iterates to next step by replacing the old madlib with the new one."""
def playGame():
    correctAnswers = left = 0
    chance = 5
    currentStage, Answers= chooseLevel()
    while correctAnswers < len(voids):
            if left < chance:
                print currentStage
                userStage = chooseAnswers(voids[correctAnswers]).format(correctAnswers)
                if userStage == Answers[correctAnswers]:
                    print "\nGood job! Answer #{} is correct.\n".format(correctAnswers + 1)
                    currentStage = currentStage.replace(voids[correctAnswers], userStage)
                    correctAnswers = correctAnswers + 1
                else:
                    left += 1
                    print "\nYou have " + str(chance-left) + " chance(s) left\n"
            else:
                exitGame()
    print "Congratulations! You have won the " + str(difficulty) + " Blockchain Madlib Game.\nRun the program again to play the other difficulty games.\n"
    print currentStage

playGame()
